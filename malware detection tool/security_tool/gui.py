import tkinter as tk
from tkinter import messagebox, ttk, scrolledtext
from tkinter.font import Font
from malware_detection import scan_for_malware
from network_monitor import monitor_network
from process_monitor import monitor_processes
from file_integrity import monitor_file_integrity
from registry_monitor import monitor_registry
from port_scanner import scan_ports
from behavior_analysis import monitor_behavior
import threading
import time

class SecurityToolGUI:
    def __init__(self, root):
        self.root = root
        self.root.title('MalX: Advanced Security Tool')
        self.root.geometry('800x600')
        self.root.configure(bg='#1A1A1A')  # Dark background

        # Custom font
        self.font = Font(family="Helvetica", size=12)

        # Create frames for layout
        self.create_frames()
        self.create_widgets()

    def create_frames(self):
        # Title Frame
        self.title_frame = tk.Frame(self.root, bg='#2E2E2E', padx=10, pady=10)
        self.title_frame.pack(fill=tk.X)

        # Button Frame
        self.button_frame = tk.Frame(self.root, bg='#2E2E2E', padx=10, pady=10)
        self.button_frame.pack(pady=10)

        # Log Frame
        self.log_frame = tk.Frame(self.root, bg='#2E2E2E', padx=10, pady=10)
        self.log_frame.pack(pady=10, fill=tk.BOTH, expand=True)

        # Status Frame
        self.status_frame = tk.Frame(self.root, bg='#2E2E2E', padx=10, pady=10)
        self.status_frame.pack(fill=tk.X)

    def create_widgets(self):
        # Title Label
        title_label = tk.Label(self.title_frame, text="MalX: Advanced Security Tool", font=("Helvetica", 24, "bold"), fg="#FFFFFF", bg="#2E2E2E")
        title_label.pack(pady=10)

        # Scan Buttons
        buttons = {
            'Scan for Malware': self.start_scan_malware,
            'Monitor Network': self.start_network_monitor,
            'Monitor Processes': self.start_process_monitor,
            'Monitor File Integrity': self.start_file_integrity_monitor,
            'Monitor Registry': self.start_registry_monitor,
            'Scan Ports': self.start_port_scan,
            'Monitor Behavior': self.start_behavior_analysis
        }

        for text, command in buttons.items():
            btn = tk.Button(self.button_frame, text=text, command=command, font=self.font, bg="#4CAF50", fg="#FFFFFF", relief="raised", activebackground="#45A049", width=25)
            btn.pack(side=tk.LEFT, padx=5, pady=5)

        # Progress Bar
        self.progress_bar = ttk.Progressbar(self.root, orient='horizontal', length=600, mode='determinate')
        self.progress_bar.pack(pady=20)

        # Log Text Area
        self.log_area = scrolledtext.ScrolledText(self.log_frame, wrap=tk.WORD, width=90, height=15, font=("Arial", 10), bg="#1E1E1E", fg="#FFFFFF")
        self.log_area.pack(fill=tk.BOTH, expand=True)

        # Status Label
        self.status_label = tk.Label(self.status_frame, text="", font=("Helvetica", 12), fg="#FFFFFF", bg="#2E2E2E")
        self.status_label.pack(pady=10)

    def start_scan_malware(self):
        self.run_scan(scan_for_malware, "Malware Scan")

    def start_network_monitor(self):
        self.run_scan(monitor_network, "Network Monitoring")

    def start_process_monitor(self):
        self.run_scan(monitor_processes, "Process Monitoring")

    def start_file_integrity_monitor(self):
        self.run_scan(monitor_file_integrity, "File Integrity Monitoring")

    def start_registry_monitor(self):
        self.run_scan(monitor_registry, "Registry Monitoring")

    def start_port_scan(self):
        self.run_scan(scan_ports, "Port Scanning")

    def start_behavior_analysis(self):
        self.run_scan(monitor_behavior, "Behavior Analysis")

    def run_scan(self, scan_function, scan_name):
        self.progress_bar['value'] = 0
        self.status_label['text'] = f"Running {scan_name}..."
        self.log_area.delete(1.0, tk.END)  # Clear previous logs
        self.root.update()

        # Run the scan in a separate thread
        threading.Thread(target=self.scan_with_progress, args=(scan_function, scan_name)).start()

    def scan_with_progress(self, scan_function, scan_name):
        # Simulate progress
        total_steps = 10
        for i in range(total_steps):
            time.sleep(0.5)  # Simulate work being done
            self.progress_bar['value'] += 100 / total_steps  # Update progress bar
            self.log_area.insert(tk.END, f"{scan_name}: Step {i + 1}/{total_steps} completed...\n")
            self.log_area.see(tk.END)  # Scroll to the end of the log area

        # Call the scan function
        results = scan_function()
        self.log_area.insert(tk.END, "\n--- Scan Results ---\n")
        for result in results:
            self.log_area.insert(tk.END, f"{result}\n")
        self.log_area.insert(tk.END, "\nScan Completed.\n")
        self.show_alert("Scan Completed", "The scan has been completed. Check the log for details.")
        self.status_label['text'] = "Scan completed."

    def show_alert(self, title, message):
        messagebox.showinfo(title, message)
        self.progress_bar['value'] = 0  # Reset progress bar

def main():
    root = tk.Tk()
    app = SecurityToolGUI(root)
    root.mainloop()

if __name__ == '__main__':
    main()



